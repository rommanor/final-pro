pipeline {
    agent any
    environment {
        test_server_ip = '172.30.173.238'
         // test_server_port = '32662'
        test_server_port =sh(
        script: 'kubectl --kubeconfig=/var/lib/jenkins/.kube/config get service flask-app-service1 -o=jsonpath="{.spec.ports[?(@.port==80)].nodePort}"',
        returnStdout: true
    ).trim()
        sh 'kubectl config use-context rancher-desktop'

    }
    stages {
        stage('Cleanup') {
            steps {
                sh 'echo "Performing cleanup..."'
                sh 'rm -rf *'
                sh 'docker image prune -a -f '
                sh 'docker container prune -f '
            }
        }
        stage('Clone') {
            steps {
                sh 'echo "Building..."'
                sh 'git clone https://github.com/rommanor/final-pro.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                sh 'echo "Building Docker image..."'
                dir('final-pro') {
                    sh "docker build -t rommanor/final-pro:latest ."
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                sh 'echo "Pushing Docker image to Docker Hub..."'
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                    docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                    docker push rommanor/final-pro
                    '''
                }
            }
        }
      stage('Fetch Latest Helm Chart') {
            steps {
                withCredentials([file(credentialsId: 'gcloud-creds', variable: 'GCLOUD_CREDS')]) {
                    sh 'gcloud auth activate-service-account --key-file="$GCLOUD_CREDS"'
                    script {
                        def helmCharts = sh(script: 'gsutil ls gs://bucket-pro/romapp*.tgz | sort', returnStdout: true).trim().split("\n")
                        def latestChart = helmCharts[helmCharts.size() - 1]
                        env.LATEST_CHART = latestChart.split("/").last()
                    }
                    echo "Latest chart to copy: ${env.LATEST_CHART}"
                    sh "gsutil cp gs://bucket-pro/${env.LATEST_CHART} ."
                }
            }
        }
        stage('Running kubernetes on test') {
            steps {
                sh 'kubectl config use-context rancher-desktop'
                sh 'kubectl delete deployments --all'
                // sh 'kubectl delete services --all'
                sh "helm upgrade --install my-release-name ${env.LATEST_CHART}"
                sh 'kubectl get nodes -o wide'
            }
        }
        stage('Testing') {
    steps {
        script {
            sh 'echo "Running tests..."'
            
            // Make an HTTP request to the test server and capture the response status code
            def response = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://${test_server_ip}:${test_server_port}', returnStdout: true).trim()
            
            // Check if the response status code is 200 (OK)
            if (response == '200') {
                echo 'Application returned a 200 status code. Test passed!'
            } else {
                echo "Application returned a non-200 status code: ${response}. Test failed!"
                error('Test failed!') // Abort the pipeline with an error status
            }
        }
    }
}

        stage('deploy to prod') {
            steps {
                withCredentials([file(credentialsId: 'gcloud-creds', variable: 'GCLOUD_CREDS')]) {
                    sh 'gcloud auth activate-service-account --key-file="$GCLOUD_CREDS"'
                    sh 'gcloud container clusters get-credentials cluster-1093 --region=europe-central2-a --project=elegant-azimuth-393211'
                    sh "helm upgrade --install my-release-name ${env.LATEST_CHART}"
                    sh 'sleep 60'
                }
            }
        }
    }
}
