pipeline {
    agent any
    environment {
        TEST_SRV_IP = '52.90.51.201'
        PROD_SRV_IP = '3.83.176.126'
        AWS_DEFAULT_REGION = 'us-east-1'
    }
    stages {
        stage('Cleanup') {
            steps {
                sh 'echo "Performing cleanup..."'
                sh 'rm -rf *'
                sh 'docker image prune -a -f '
                sh 'docker container prune -f '
            }
        }
        stage('Clone') {
            steps {
                sh 'echo "Building..."'
                sh 'git clone https://github.com/rommanor/final-pro.git'
                
            }
        }
        stage('Build Docker Image') {
            steps {
                sh 'echo "Building Docker image..."'
                dir('final-pro') {
                sh "docker build -t rommanor/final-pro:latest ."
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                sh 'echo "Pushing Docker image to Docker Hub..."'
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                sh '''
                docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                docker push rommanor/final-pro
                '''
                }
            }
        }
        stage('prep test srv') {
          steps {
           script{
            sh 'echo "Pulling Docker image from Docker Hub..."'
            sh 'kubectl config use-context rancher-desktop' // Set Rancher Desktop context
            sh 'kubectl apply -f /var/lib/jenkins/workspace/flask-docker-compose/final-pro/k8s/test-server-deployment.yaml' // Apply Kubernetes deployment manifest for test server
            sh 'kubectl apply -f /var/lib/jenkins/workspace/flask-docker-compose/final-pro/k8s/test-server-service.yaml' // Apply Kubernetes service manifest for test server
            sh '''
            # Wait for test server to be ready
            kubectl wait --for=condition=available --timeout=5m deployment/test-server
            '''
           }
          }
        }
      
        stage('Testing') {
            steps {
                // Testing steps remain the same
            }
        }
        stage('deploy to cluster') {
            steps {
                script {
                    sh 'echo "Pulling Docker image from Docker Hub..."'
                    sh 'gcloud auth activate-service-account --key-file=/path/to/gcloud-service-key.json' // Authenticate with Google Cloud using service account key
                    sh 'gcloud config set project YOUR_PROJECT_ID' // Set your Google Cloud project ID
                    sh 'gcloud container clusters get-credentials YOUR_CLUSTER_NAME --zone YOUR_ZONE' // Get cluster credentials

                    sh 'kubectl apply -f /var/lib/jenkins/workspace/flask-docker-compose/final-pro/k8s/production-server-deployment.yaml' // Apply Kubernetes deployment manifest for production server
                    sh 'kubectl apply -f /var/lib/jenkins/workspace/flask-docker-compose/final-pro/k8s/production-server-service.yaml' // Apply Kubernetes service manifest for production server
                    sh '''
                    # Wait for production server to be ready
                    kubectl wait --for=condition=available --timeout=5m deployment/production-server
                    '''
                }
            }
        }
    
}
